<%-- 
    Include any helper files.
--%>
<%@include file="../helpers/LocaleHelper.jspf" %>

<%--
    Include any model files.
--%>
<%@include file="../models/LocalePreference.jspf"%>
<%--
    Notes:
    1.  Determine and set the preferred locale for the bundle, which is required for resource bundle creation.
    2.  Determine the abosolute file path to the translation files on the webserver, which is required for resource bundle creation.
    3.  Set the resourceBundle variables that will be used in this package.
    4.  Populate the resource bundle i18nValues for the appropriate resourceBundles, which are used in JavaSript in the common head.jspf. 
        These i18nValues are stored in the property files as "javascript.<keyvalue>".  The i18nValues variable is usually started in the 
        common languageInitialization.jspf file.
--%>
<%
    // Get preferred locale from the locale helper
    String preferredLocale = LocaleHelper.getPreferredLocale(context, session, request, customerRequest.getTemplateId());
    // Define preferred locale in Bundle properties
    bundle.setProperty("preferredLocale", preferredLocale);
    // Set real path to the common package on the webserver
    String commonRealPath = getServletContext().getRealPath(bundle.relativeBundlePath() + "common");
    // Set the absolute path to the directory containing the locale property files
    String commonTranslationPath = commonRealPath + File.separator + "resources" + File.separator + "languages";
    // Start the common resource bundle
    ResourceBundle commonResourceBundle = ThemeLocalizer.getResourceBundle("common", bundle.getProperty("preferredLocale"), commonTranslationPath);
    // Start the service items resource bundles (contains the names and descriptions of each service item)
    ResourceBundle serviceItemsResourceBundle = ThemeLocalizer.getResourceBundle("serviceItems", bundle.getProperty("preferredLocale"), commonTranslationPath);
    // Set the i18nValues for common resource bundle
    bundle.setProperty("i18nValues", ThemeLocalizer.getJavaScriptValues(commonResourceBundle, bundle.getProperty("i18nValues")));
    // Set the i18nValues for the service items resource bundle
    bundle.setProperty("i18nValues", ThemeLocalizer.getJavaScriptValues(serviceItemsResourceBundle, bundle.getProperty("i18nValues")));
%>