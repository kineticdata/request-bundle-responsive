<%!
    public static class LocaleHelper {
        public static String getPreferredLocale(HelperContext context, HttpSession session, HttpServletRequest request, String templateInstanceId) {
            // Define default preferred locale using HttpServletRequest:
            // Returns the preferred Locale that the client will accept content in, based on the Accept-Language header. 
            // If the client request doesn't provide an Accept-Language header, this method returns the default locale for the server.
            String preferredLocale = request.getLocale().toString();
            // Define session locale
            String sessionLocale = (String) session.getAttribute("preferredLocale");
            // Determine if there is a value
            if (StringUtils.isNotBlank(sessionLocale)) {
                // Update preferredLocale from session
                preferredLocale = sessionLocale;
            }
            // Set preferred locale from preference
            else {
                // Determine if there is an authenticated user
                if(context != null) {
                    // Retrieve the user's preferences from helper using the preference model
                    Map<String,List<LocalePreference>> preferences = LocalePreference.findByUser(context, context.getUserName());
                    // If no language preference record is found, create one for the user.
                    if (!preferences.containsKey("Language")) {
                        // Create preference for user
                        preferences = LocalePreference.create(context, context.getUserName(), request.getLocale().toString());
                    }
                    // Get locale from the top of the list
                    String databaseLocale = preferences.get("Language").get(0).getValue();
                    // Determine if there is a value
                    if(StringUtils.isNotBlank(databaseLocale)) {
                        preferredLocale = databaseLocale;
                    }
                }
                // Store locale in session
                session.setAttribute("preferredLocale", preferredLocale);
            }
            
            // Determine if there is an authenticated user
            if(context != null) {
                // Define locale template attributes
                TemplateAttribute[] templateLocaleAttributes = TemplateAttribute.getAttributeValue(
                    context,
                    (String) templateInstanceId,
                    "locale"
                );
                // Determine if template attributes exist
                if (templateLocaleAttributes.length > 0) {
                    // Define check to false
                    Boolean templateAttributeValueCheck = false;
                    // Loop through template attributes
                    for(TemplateAttribute templateLocaleAttribute : templateLocaleAttributes) {
                        // Define value
                        String templateLocaleValue = templateLocaleAttribute.getValue();
                        // Find a value match with preferredLocale
                        if(templateLocaleValue != null && templateLocaleValue.equals(preferredLocale)) {
                            // Set check to true if value match found with preferred locale
                            templateAttributeValueCheck = true;
                            // Stop loop
                            break;
                        }
                    }
                    // If no match, use default locale from the server
                    if(!templateAttributeValueCheck) {
                        preferredLocale = request.getLocale().toString();
                    }
                }
            }
            return preferredLocale;
        }
        
        public static void setPreferredLocale(HelperContext context, HttpSession session, String preferredLocale) {
            // Retrieve the user's preferences from helper using the preference model
            Map<String,List<LocalePreference>> preferences = LocalePreference.findByUser(context, context.getUserName());
            // If no language preference record is found, create one for the user.
            if (preferences.containsKey("Language")) {
                // Create preference for user
                LocalePreference.update(context, context.getUserName(), preferredLocale);
            } else {
                LocalePreference.create(context, context.getUserName(), preferredLocale);
            }
            // Store locale in session
            session.setAttribute("preferredLocale", preferredLocale);
        }
    }
%>