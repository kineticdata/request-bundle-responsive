<%@page import="java.io.File"%>
<%@page import="org.json.simple.parser.JSONParser"%>
<%@page import="org.json.simple.JSONObject"%>
<%@page import="java.io.FileReader"%>
<%!
    /**
     * The Configurator Helper.
     * 
     * Used to load the current and all the package's JSON configuration files located under
     * packages/package/config/config.json. These configurations are used to determine what
     * package view to process for a Bundle layout.  These configurations also contain UI
     * related data for the current theme, which can be leveraged by the layout.
     */
    public class Configurator {
        
        private JsonBase configuration;
        private Map<String,JsonBase> configurationsByPackage;
        private String currentPackage = "catalog";
        private Bundle bundle;
        
        /**
         * This constructor will use the Bundle object to parse through each of the packages
         * under the package's directory to find a config.json file located in 
         * packages/package/config.  The constructor will set this json configuration by package
         * name under configurations by package.
         * No errors are thrown if a configuration is not found.
         * 
         * @param Bundle
         */
        public Configurator(Bundle bundle) {
            // Set bundle
            this.bundle = bundle;
            // Check if current package path is not null
            if(bundle.packagePath() != null) {
                // Define package path
                String packagePath = getServletContext().getRealPath(bundle.packagePath());
                // Update current package
                this.currentPackage = new File(packagePath).getName();
            }
            // Define packages path
            String packagesDirectory = getServletContext().getRealPath("/" + bundle.relativeBundlePath() + "packages");
            // Define configurations by package
            Map<String,JsonBase> configurationsByPackage = new HashMap<String,JsonBase>();  
            // Define packages file
            File packagesFile = new File(packagesDirectory);
            // Get list of all files
            File[] files = packagesFile.listFiles();
            // Loop through directory names
            for(File file : files) {
                // Determine if this is a directory
                if (file.isDirectory()) {
                    // Define package directory
                    String packageDirectory = file.getAbsolutePath();
                    // Define package JSON config
                    String packageConfigurationFile = packageDirectory + File.separator + "config" + File.separator + "config.json";
                    try {
                        JSONParser parser = new JSONParser();
                        JSONObject jsonConfiguration = (JSONObject) parser.parse(new FileReader(packageConfigurationFile));
                        configurationsByPackage.put(file.getName(), new JsonBase(jsonConfiguration));
                    } catch (Exception e) {}
                }
            }
            // Set configurations
            this.configurationsByPackage = configurationsByPackage;   
        }
        
        /**
         * Returns the map of JSON configurations by package folder name
         * @return Map<String,JsonBase>
         */
        public String getPackagesConfiguration() {
            return JSONValue.toJSONString(this.configurationsByPackage);
        }
        
        /**
         * Returns the current package's JSON configuration
         * as a real JSON string.
         * 
         * @return String
         */
        public String getCurrentPackageConfiguration() {
            return JSONValue.toJSONString(this.configurationsByPackage.get(this.currentPackage));
        }
        
        /**
         * Returns the locales from the packages into a map
         * 
         * @return Map<String,String>
         */
        public Map<String,String> getLocales() {
            Map<String,String> results = new LinkedHashMap<String,String>();
            for(Map.Entry<String,JsonBase> element : this.configurationsByPackage.entrySet()) {
                JsonBase jsonBase = element.getValue();
                // Determine if langauges exist
                if(jsonBase.getMap("languages") != null) {
                    // Update results
                    Map<String,String> packageLanguages = jsonBase.getMap("languages");
                    // Loop through package languages
                    for(Map.Entry<String,String> entry : packageLanguages.entrySet()) {
                        // Define key and value from each element
                        String key = entry.getKey();
                        String value = entry.getValue();
                        // Update results
                        results.put(key, value);
                    }
                }
            }
            return results;
        }
        
        /**
         * Returns the current package's JSON configuration as a JsonBase object
         * to be traversed.
         * 
         * @return JsonBase
         */
        public JsonBase getCurrentPackageConfig() {
            // Define result
            JsonBase packageConfig = null;
            // Define current package json base config
            JsonBase jsonBase = this.configurationsByPackage.get(this.currentPackage);
            // Check that we found the current package config
            if(jsonBase != null) {
               // Update result
               packageConfig = jsonBase;
            }
            return packageConfig;
        }
        
        /**
         * Returns the current package view from the package JSON configuration based
         * on the view name.  This view provides information like the title of the view or
         * JSP that should dynamically included as the content.
         * 
         * @return JsonBase
         */
        public JsonBase getPackageViewByName(String packageViewName) {
            // Define result
            JsonBase view = null;
            // Check for null
            if(packageViewName == null) { packageViewName = "";}
            // Define current package json base config
            JsonBase jsonBase = this.getCurrentPackageConfig();
            // Check that we found the current package config
            if(jsonBase != null) {
               // Define package views
               JsonBase packageViews = jsonBase.getObject("views");
               // Check for null
               if(packageViews != null) {
                   view = packageViews.getObject(packageViewName);
               }
            }
            return view;
        }
        
        /**
         * Returns the default package view (if configured) from the package JSON configuration 
         * based on the "default" view name.  This view provides information like the title of 
         * the view or JSP that should dynamically included as the content.
         * 
         * @return JsonBase
         */
        public JsonBase getDefaultPackageView() {
            // Define result
            JsonBase view = null;
            // Define current package json base config
            JsonBase jsonBase = this.getCurrentPackageConfig();
            // Check that we found the current package config
            if(jsonBase != null) {
                // Define package views
                JsonBase views = jsonBase.getObject("views");
                // Update view
                view = views.getObject("default");
            }
            return view;
        }
        
        /**
         * Returns the default package view configuration's content JSP path for dynamic
         * includes.
         * 
         * @return String
         */
        public String getDefaultViewContent() {
            // Define result
            String content = null;
            // Define default view
            JsonBase view = this.getDefaultPackageView();
            // Determine null
            if(view != null) {
                // Update page content
                content = view.getString("content");
            }
            return content;
        }
        
        /**
         * Returns the default package view configuration's head JSP path for dynamic
         * includes of head content.
         * 
         * @return String
         */
        public String getDefaultViewHead() {
            // Define result
            String head = null;
            // Define default view
            JsonBase view = this.getDefaultPackageView();
            // Determine null
            if(view != null) {
                // Update page content
                head = view.getString("head");
            }
            return head;
        }
        
        /**
         * Returns the current package view configuration's content JSP path for dynamic
         * includes based on the current package's view name.
         * 
         * @param packageViewName
         * @return String
         */
        public String getCurrentViewContent(String packageViewName) { 
            // Define result
            String content = null;
            // Define current package json base config
            JsonBase jsonBase = this.getCurrentPackageConfig();
            // Determine null
            if(jsonBase != null) {
                // Define package views
                JsonBase views = jsonBase.getObject("views");
                // Define page specific view
                JsonBase view = views.getObject(packageViewName);
                // Determine if not null
                if(view != null) {
                    // Update page content
                    content = view.getString("content");
                }
                // Determine if content is null
                if(content == null) {
                    // Update to package configured default view
                    content = this.getDefaultViewContent();
                }
            }
            return content;
        }
        
        /**
         * Returns the package callback JSP path for the current package's
         * callback name.
         * 
         * @param packageCallbackName
         * @return String
         */
        public String getCurrentCallback(String packageCallbackName) { 
            // Define result
            String content = null;
            // Define current package json base config
            JsonBase jsonBase = this.getCurrentPackageConfig();
            // Determine null
            if(jsonBase != null) {
                // Define package views
                JsonBase views = jsonBase.getObject("callbacks");
                // Define page specific view
                JsonBase view = views.getObject(packageCallbackName);
                // Determine if not null
                if(view != null) {
                    // Update page content
                    content = view.getString("content");
                }
                // Determine if callback null
                if(content == null) {
                    String message = "callback " + packageCallbackName + " not in package configuraiton";
                    throw new RuntimeException(message);
                }
            }
            return content;
        }
        
        /**
         * Returns the current package view configuration's head JSP path for dynamic
         * includes of head content based on the current package's view name.
         * 
         * @param packageViewName
         * @return String
         */
        public String getCurrentViewHead(String packageViewName) {
            // Define result
            String head = null;
            // Define current package json base config
            JsonBase jsonBase = this.getCurrentPackageConfig();
            // Determine null
            if(jsonBase != null) {
                // Define package views
                JsonBase views = jsonBase.getObject("views");
                // Define view
                JsonBase view = views.getObject(packageViewName);
                // Determine if not null
                if(view != null) {
                    // Update page content
                    head = view.getString("head");
                }
                // Determine if content is null
                if(head == null) {
                    // Update to package configured default view
                    head = this.getDefaultViewHead();
                }
            }
            return head;
        }
        
        /**
         * Returns the current package view configuration's title (null if it does not exist).
         * The current view head is determined first if a request attribute has been set.
         * Otherwise, request get parameter view is used to get the current view and it's title.
         * 
         * @param HttpServletRequest
         * @return String
         */
        public String getCurrentViewTitle(HttpServletRequest request) {
            // Define result
            String title = null;
            // Determine if title set in request, this supercedes ANY package configuration
            if(request.getAttribute("title") != null) {
                if(request.getAttribute("title") instanceof String) {
                    // Update title
                    title = (String) request.getAttribute("title");
                } else {
                    throw new RuntimeException(
                        "request attribute title: " + request.getAttribute("title") + " not a string."
                    );
                }
            }
            // Attempt to set title from package configuratiion
            else {
                // Define current package json base config
                JsonBase jsonBase = this.getCurrentPackageConfig();
                // Determine null
                if(jsonBase != null) {
                    // Define package views
                    JsonBase views = jsonBase.getObject("views");
                    // Define view
                    JsonBase view = views.getObject(request.getParameter("view"));
                    // Determine if not null
                    if(view != null) {
                        // Update page content
                        title = view.getString("title");
                    }

                    // Determine if title is null and use default view title
                    if(title == null) {
                        // Get default view
                        view = this.getDefaultPackageView();
                        // Determine null
                        if(view != null) {
                            // Update page content
                            title = view.getString("title");
                        }
                    }
                    if(title == null) {
                        title = "";
                    }
                }
            }
            return title;
        }
        
        /**
         * Used to process the correct view for a layout based on the package JSON configuration
         * and request attributes or parameters (depending on which is set). Ultimately, this
         * method will set the current view content JSP and head JSP (if exists) as request
         * attributes to be used by the layout for dynamic includes.  If it's determined there 
         * is a callback, then the request forwards to the callback skipping the layout.
         * 
         * @param HttpServletRequest
         * @param HttpServletResponse
         * @return void
         */
        public void processView(HttpServletRequest request, HttpServletResponse response) {
            // Define absolute application context path to current package
            String currentPackagePath = "/" + this.bundle.relativePackagePath;
            // Determine if callback defined
            if(StringUtils.isNotBlank(request.getParameter("callback"))) {
                this.processCallback(request, response, request.getParameter("callback"));
            }
            // Determine if the view is an attribute which supercedes request parameters
            String view = (request.getAttribute("view") != null) ? (String) request.getAttribute("view") : request.getParameter("view");
            // Set head attribute
            request.setAttribute("head", currentPackagePath + this.getCurrentViewHead(view));
            // Set content attribute
            request.setAttribute("content", currentPackagePath + this.getCurrentViewContent(view));
        }
        
        /**
         * Used to process the correct view for a layout based on the package JSON configuration
         * and the view name supplied. Ultimately, this method will set the current view 
         * content JSP and head JSP (if exists) as request attributes to be used by the layout
         * for dynamic includes.
         * 
         * @param HttpServletRequest
         * @param HttpServletResponse
         * @param String view
         * @return void
         */
        public void processView(HttpServletRequest request, HttpServletResponse response, String view) {
            // Define absolute application context path to current package
            String currentPackagePath = "/" + this.bundle.relativePackagePath;
            // Set head attribute
            request.setAttribute("head", currentPackagePath + this.getCurrentViewHead(view));
            // Set content attribute
            request.setAttribute("content", currentPackagePath + this.getCurrentViewContent(view));
        }
        
        /**
         * Used to process a callback from the current package's JSON confguration based on
         * the callback name.
         * 
         * @param HttpServletRequest
         * @param HttpServletResponse
         * @param String
         * @return void
         */
        public void processCallback(
            HttpServletRequest request,
            HttpServletResponse response,
            String callbackName
        ) {
            // Define absolute application context path to current package
            String currentPackagePath = "/" + this.bundle.relativePackagePath;
            // Forward to callback
            RequestDispatcher dispatcher = request.getRequestDispatcher(
                currentPackagePath + this.getCurrentCallback(callbackName)
            );
            try {
               dispatcher.forward(request, response);
               return;
            } catch(Exception e) {
                throw new RuntimeException("Cannot process view: " + e.getMessage());
            }
        }
    }
%>