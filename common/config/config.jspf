<%--
    NOTE: This file is required.
--%>
<%
    // Retrieve the survey logger that can be used to write to the kslog (useful for debugging and testing)
    Logger logger = LogHelper.getLogger();
    
    // Define system context, which is required for some queries
    HelperContext systemContext = RemedyHandler.getDefaultHelperContext();
    
    // Define url friendly slug, which is used in the urls below
    bundle.setProperty("slug", "Responsive-");
    // Define catalog attributes
    Map<String, List<String>> catalogAttributes = CatalogAttributeHelper.getCatalogAttributeConfiguration(
        session,
        systemContext,
        customerRequest.getCatalogId()
    );
    // Override the slug if it exists
    if(catalogAttributes != null && !catalogAttributes.isEmpty()){
        List<String> slug = catalogAttributes.get("slug");
        if (slug != null && !slug.isEmpty()){
            bundle.setProperty("slug", slug.get(0));
        }
    }
    
    // Define company name
    bundle.setProperty("companyName", "ACME");
    // Define catalog name
    bundle.setProperty("catalogName", customerRequest.getCatalogName());
    // Define display page url with slug
    bundle.setProperty("displayPageUrl", bundle.applicationPath() + "DisplayPage");
    // Define display page url with slug
    bundle.setProperty("displayPageUrlSlug", bundle.applicationPath() + "DisplayPage?name=" + bundle.getProperty("slug"));
    // Url to authentication servlet for logout
    bundle.setProperty("logoutUrl", "KSAuthenticationServlet?Logout=true");
    // This is a path to the review jsp to be used by review request.
    bundle.setProperty("reviewJsp", bundle.relativeBundlePath() + "packages/catalog/review.jsp");
    // Service Item Image Library Path
    bundle.setProperty("serviceItemImagePath", bundle.bundlePath() + "../../surveys/kineticImageLibrary/");
    // Define loader indicator image
    bundle.setProperty("loaderImageUrl", bundle.bundlePath + "common/assets/images/spinner.gif");

    // Add common template id for bridges 
    Template common = null;
    if (context != null) {
        common = Template.findByDisplayName(context, customerRequest.getCatalogName(), bundle.getProperty("slug") + "Common");
    }
    if(common != null){
        bundle.setProperty("commonTemplateId", common.getId());
    }
    
    // Collect all property and variable keys so we can add them to the BUNDLE JS object
    List<String> catalogAttributePropertyKeys = new ArrayList<String>();
    List<String> catalogAttributeVariableKeys = new ArrayList<String>();
    // Loop through attributes and store them as bundle properties, which overrides any properties assigned above
    if(catalogAttributes != null && !catalogAttributes.isEmpty()){
        for (Map.Entry<String,List<String>>  attribute : catalogAttributes.entrySet()) {
            if(StringUtils.isNotBlank(attribute.getValue().get(0))) {
                if(attribute.getValue().size() > 1){
                    bundle.setVariable(attribute.getKey(), attribute.getValue());
                    catalogAttributeVariableKeys.add(attribute.getKey());
                }
                else {
                    bundle.setProperty(attribute.getKey(), attribute.getValue().get(0));
                    catalogAttributePropertyKeys.add(attribute.getKey());
                }
            }
        }
    }
    // Add property and variable keys to bundle object
    bundle.setVariable("catalogAttributePropertyKeys", catalogAttributePropertyKeys);
    bundle.setVariable("catalogAttributeVariableKeys", catalogAttributeVariableKeys);

    // Boolean for displaying the logout link
    Boolean logoutEnabled = true;
    // Category filter for not displaying categories in the flyout navigation that are portal page specific like self help
    ArrayList<String> categoryFilter = new ArrayList<String>();
    //categoryFilter.add("Self Help");
    HashSet<String> categoryFilterHashSet = new HashSet<String>(categoryFilter);
%>