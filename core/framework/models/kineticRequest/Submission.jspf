<%!
    public static class Submission {
        public static final String FORM_NAME = "KS_SRV_CustomerSurvey";
        public static final String FIELD_CATALOG_NAME = "600000500";
        public static final String FIELD_CREATE_DATE = "3";
        public static final String FIELD_ID = "179";
        public static final String FIELD_NOTES = "600003021";
        public static final String FIELD_REQUEST_ID = "536870913";
        public static final String FIELD_SUBMIT_TYPE = "700088475";
        public static final String FIELD_SUBMITTER = "2";
        public static final String FIELD_TEMPLATE_ID = "700000800";
        public static final String FIELD_TEMPLATE_NAME = "700001000";
        public static final String FIELD_REQUEST_CLOSED_DATE = "700088489";
        public static final String FIELD_LOOKUP_ID = "700002450";
        public static final String FIELD_ORIGINATING_ID = "600000310";

        // Represents the status of the Submission.
        public static final String FIELD_STATUS = "7";
        // Represents the status of the Request including task workflow (This is
        // a Enumeration field that allows values of 'Open' or 'Closed' and is
        // typically set by the KineticRequest_Submission_Close handler).
        public static final String FIELD_REQUEST_STATUS = "700089541";
        // Represents the state of the Request (This is a free text field that
        // is intended to communicate the overall progress of the Request.  This
        // value is typically set by the KineticRequest_Submission_UpdateStatus
        // task handler).
        public static final String FIELD_VALIDATION_STATUS = "700002400";

        public static final String[] FIELD_IDS = new String[] {
            FIELD_CATALOG_NAME, FIELD_CREATE_DATE, FIELD_ID, FIELD_REQUEST_ID,
            FIELD_NOTES, FIELD_SUBMIT_TYPE, FIELD_SUBMITTER, FIELD_TEMPLATE_ID,
            FIELD_TEMPLATE_NAME, FIELD_STATUS, FIELD_REQUEST_STATUS, 
            FIELD_REQUEST_CLOSED_DATE, FIELD_VALIDATION_STATUS};

        private SimpleEntry entry;
        private HelperContext context;
        private Map<String,String> additionalFieldValues;
        private Template template;
        private Task[] tasks;
        private Run[] runs;
        private Map<String,List<Task>> taskTreeExecutions;

        /***********************************************************************
         * Static Retrieval Methods
         **********************************************************************/

        /*
         * Retrieval methods that simply take a qualification.  Note that one of them takes an
         * additional fields map while the other will pass no additional fields.
         */
        public static Submission[] find(HelperContext context, String qualification) {
            return find(context, qualification, new String[0], 0, 0, 1, new HashMap<String,String>());
        }
        public static Submission[] find(HelperContext context, String qualification, Map<String,String> additionalFields) {
            return find(context, qualification, new String[0], 0, 0, 1, additionalFields);
        }
        
        /*
         * Retrieval methods that take a qualification and a limit of records to return.  Note that
         * one of them takes an additional fields map while the other will pass no additional fields.
         */
        public static Submission[] find(HelperContext context, String qualification, Integer number) {
            return find(context, qualification, new String[0], number, 0, 1, new HashMap<String,String>());
        }
        public static Submission[] find(HelperContext context, String qualification, Integer number, Map<String,String> additionalFields) {
            return find(context, qualification, new String[0], number, 0, 1, additionalFields);
        }
        
        /*
         * Retrieval methods that take all of the parameters (limit, offset, sort fields, and sort
         * order).  Note that one of them takes an additional fields map while the other will pass
         * no additional fields.
         */
        public static Submission[] find(HelperContext context, String qualification, String[] sortFields,
                Integer chunkSize, Integer recordOffset, Integer sortOrder) {
            return find(context, qualification, sortFields, chunkSize, recordOffset, sortOrder, new HashMap<String,String>());
        }
        public static Submission[] find(HelperContext context, String qualification, String[] sortFields,
                Integer chunkSize, Integer recordOffset, Integer sortOrder, Map<String,String> additionalFields) {
            // Initialize the result array.
            Submission[] results = new Submission[0];
            
            // Combine the FIELD_IDS constant with the field ids defined in the additionalFields map
            // to determine the fields to retrieve with this query.
            Set<String> includeFields = new HashSet<String>();
            for (String fieldId : FIELD_IDS) {
                includeFields.add(fieldId);
            }
            for (String fieldId : additionalFields.values()) {
                includeFields.add(fieldId);
            }
            
            // Make the API call.
            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, includeFields.toArray(new String[0]),
                    sortFields, chunkSize, recordOffset, sortOrder);
            
            // Populate the results array.
            if (entries != null && entries.length > 0) {
                results = new Submission[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new Submission(entries[i], context, additionalFields);
                }
            }

            // Return the result.
            return results;
        }

        /*
         * Retrieval methods that retrieve a submission by its instance id.  Note that one of them
         * takes an additional fields map while the other will pass no additional fields.
         */
        public static Submission findByInstanceId(HelperContext context, String id) {
            return findByInstanceId(context, id, new HashMap<String,String>());
        }
        public static Submission findByInstanceId(HelperContext context, String id, Map<String,String> additionalFields) {
            // Initialize the result.
            Submission result = null;

            // Combine the FIELD_IDS constant with the field ids defined in the additionalFields map
            // to determine the fields to retrieve with this query.
            Set<String> includeFields = new HashSet<String>();
            for (String fieldId : FIELD_IDS) {
                includeFields.add(fieldId);
            }
            for (String fieldId : additionalFields.values()) {
                includeFields.add(fieldId);
            }
            
            // Make the API call.
            SimpleEntry entry = ArsBase.findByInstanceId(context, FORM_NAME, id, includeFields.toArray(new String[0]));
            
            // If a record was returned instantiate a new submission instance.
            if (entry != null) {
                result = new Submission(entry, context, additionalFields);
            }

            // Return the result.
            return result;
        }

        /*
         * Retrieval methods that retrieve submissions by catalog name with a limit.  Note that the
         * default sort order is specified resulting in the more recent submissions being retrieved
         * first.
         */
        public static Submission[] findRecentByCatalogName(HelperContext context, String catalogName,
                Integer number) {
            return findRecentByCatalogName(context, catalogName, number, new HashMap<String,String>());
        }
        public static Submission[] findRecentByCatalogName(HelperContext context, String catalogName,
                Integer number, Map<String,String> additionalFields) {
            String qualification =
                "'"+FIELD_CATALOG_NAME+"' = \""+catalogName+"\" AND "+
                "'"+FIELD_SUBMITTER+"' = \""+context.getUserName()+"\"";

            return find(context, qualification, new String[0], number, 0, 1, additionalFields);
        }

        /*
         * Retrieves recent approval records (by passing "Approval" as submit type).
         */
        public static Submission[] findRecentApprovalsByCatalogName(HelperContext context, String catalogName,
                Integer number) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, "Approval", number, new HashMap<String,String>());
        }
        public static Submission[] findRecentApprovalsByCatalogName(HelperContext context, String catalogName,
                Integer number, Map<String,String> additionalFields) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, "Approval", number, additionalFields);
        } 

        /*
         * Retrieves recent request submission records (by passing null as submit type).
         */
        public static Submission[] findRecentRequestsByCatalogName(HelperContext context, String catalogName,
                Integer number) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, null, number, new HashMap<String,String>());
        }
        public static Submission[] findRecentRequestsByCatalogName(HelperContext context, String catalogName,
                Integer number, Map<String,String> additionalFields) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, null, number, additionalFields);
        }

        /*
         * Retrieves recent work order records (by passing "WorkOrder" as submit type).
         */
        public static Submission[] findRecentWorkOrdersByCatalogName(HelperContext context, String catalogName,
                Integer number) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, "WorkOrder", number, new HashMap<String,String>());
        }
        public static Submission[] findRecentWorkOrdersByCatalogName(HelperContext context, String catalogName,
                Integer number, Map<String,String> additionalFields) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, "WorkOrder", number, additionalFields);
        }

        /*
         * Retrieval methods that retrieve submissions by catalog name and submit type with a limit.
         * Note that the default sort order is specified resulting in the more recent submissions
         * being retrieved first.
         */
        public static Submission[] findRecentByCatalogNameAndSubmitType(HelperContext context, String catalogName,
                String submitType, Integer number) {
            return findRecentByCatalogNameAndSubmitType(context, catalogName, submitType, number, new HashMap<String,String>());
        }
        public static Submission[] findRecentByCatalogNameAndSubmitType(HelperContext context, String catalogName,
                String submitType, Integer number, Map<String,String> additionalFields) {
            String qualification = null;
            if (submitType != null) {
                qualification = "'"+FIELD_CATALOG_NAME+"' = \""+catalogName+"\" AND "+
                                "'"+FIELD_SUBMITTER+"' = \""+context.getUserName()+"\" AND "+
                                "'"+FIELD_SUBMIT_TYPE+"' = \""+submitType+"\"";
            } else {
                qualification = "'"+FIELD_CATALOG_NAME+"' = \""+catalogName+"\" AND "+
                                "'"+FIELD_SUBMITTER+"' = \""+context.getUserName()+"\" AND "+
                                "'"+FIELD_SUBMIT_TYPE+"' = $NULL$";
            }
            
            return find(context, qualification, new String[0], number, 0, 1, additionalFields);
        }
        
        /***********************************************************************
         * Constructors
         **********************************************************************/
        
        public Submission(SimpleEntry entry, HelperContext context, Map<String,String> additionalFields) {
            this.entry = entry;
            this.context = context;
            
            // Iterate through the additional field definitions populating the additionalFieldValues
            // map which maps the field label to the value retrieved from the simple entry object.
            this.additionalFieldValues = new HashMap<String,String>();
            for (Map.Entry<String,String> mapEntry : additionalFields.entrySet()) {
                String fieldLabel = mapEntry.getKey();
                String fieldId = mapEntry.getValue();
                this.additionalFieldValues.put(fieldLabel, entry.getEntryFieldValue(fieldId));
            }
        }
        
        /***********************************************************************
         * Related Item Accessors
         **********************************************************************/
        
        public Submission[] getChildren(HelperContext context) {
            String qualification = "'"+FIELD_LOOKUP_ID+"' = \""+getId()+"\" AND '"+FIELD_ID+"' != '"+FIELD_LOOKUP_ID+"'";
            Submission[] results = Submission.find(context, qualification);
            return results;
        }
        
        public Submission[] getDescendents(HelperContext context) {
            String qualification = "'"+FIELD_ORIGINATING_ID+"' = \""+getId()+"\" AND '"+FIELD_ID+"' != '"+FIELD_ORIGINATING_ID+"'";
            Submission[] results = Submission.find(context, qualification);
            return results;
        }
        
        public Template getTemplate() {
            if (this.template == null) {
                this.template = Template.findById(context, getTemplateId());
            }
            return this.template;
        }

        public Task[] getTasks(HelperContext context) {
            if (tasks == null) {
                // Retrieve the associated tasks
                tasks = Task.findBySource(context, "Kinetic Request", getId());
            }
            return tasks;
        }

        public Map<String,List<Task>> getTaskTreeExecutions(HelperContext context) {
            if (taskTreeExecutions == null) {
                taskTreeExecutions = new LinkedHashMap();
                Task[] tasks = getTasks(context);
                for (Task task : tasks) {
                    List<Task> treeExecutions = taskTreeExecutions.get(task.getTreeName());
                    if (treeExecutions == null) {
                        treeExecutions = new ArrayList();
                        taskTreeExecutions.put(task.getTreeName(), treeExecutions);
                    }
                    treeExecutions.add(task);
                }
            }
            return taskTreeExecutions;
        }
        
        public Run[] getRuns() {
            if (runs == null) {
                if(getTemplate().getTaskEngine().equals("Kinetic Task 2/3")) {
                    runs = Run.findBySourceId(context, "Kinetic Request", getId());
                } else if(getTemplate().getTaskEngine().equals("Kinetic Task 4+")) {
                    runs = Run.findFromTask4(context, this);
                }
            }
            return runs;
        }

        /***********************************************************************
         * Submission Property Accessors
         **********************************************************************/

        public String getCatalogName() {return entry.getEntryFieldValue(FIELD_CATALOG_NAME);}
        public String getCreateDate() {return entry.getEntryFieldValue(FIELD_CREATE_DATE);}
        public String getId() {return entry.getEntryFieldValue(FIELD_ID);}
        public String getNotes() {return entry.getEntryFieldValue(FIELD_NOTES);}
        public String getRequestId() {return entry.getEntryFieldValue(FIELD_REQUEST_ID);}
        public String getSubmitType() {return entry.getEntryFieldValue(FIELD_SUBMIT_TYPE);}
        public String getTemplateId() {return entry.getEntryFieldValue(FIELD_TEMPLATE_ID);}
        public String getTemplateName() {return entry.getEntryFieldValue(FIELD_TEMPLATE_NAME);}
        public String getStatus() {return entry.getEntryFieldValue(FIELD_STATUS);}
        public String getRequestStatus() {return entry.getEntryFieldValue(FIELD_REQUEST_STATUS);}
        public String getRequestClosedDate() {return entry.getEntryFieldValue(FIELD_REQUEST_CLOSED_DATE);}
        public String getValiationStatus() {return entry.getEntryFieldValue(FIELD_VALIDATION_STATUS);}
        
        /*
         * Returns the value of the specified additional field.  Note that if the field label passed
         * was not defined as an additional field on the query an error will be raised.
         */
        public String get(String additionalFieldLabel) {
            if (additionalFieldValues.containsKey(additionalFieldLabel)) {
                return additionalFieldValues.get(additionalFieldLabel);
            } else {
                throw new RuntimeException("The field '" + additionalFieldLabel + "' was not specified" + 
                        " as an additional field on the query for the submission record(s).");
            }
        }
    }
%>