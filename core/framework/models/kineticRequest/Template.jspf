<%!
    public static class Template {
        public static final String FORM_NAME = "KS_SRV_SurveyTemplate";

        public static final String FIELD_ANONYMOUS_URL = "700002489";
        public static final String FIELD_CATALOG = "600000500";
        public static final String FIELD_DESCRIPTION = "700001010";
        public static final String FIELD_ID = "179";
        public static final String FIELD_NAME = "700001000";
        public static final String FIELD_STATUS = "7";
        public static final String FIELD_DISPLAY_NAME = "700002298";
        public static final String FIELD_TYPE = "600000600";
        public static final String FIELD_ASSIGNEE_GROUP = "112";
        public static final String FIELD_MODIFIED = "6";
        public static final String FIELD_MODIFIED_BY = "5";
        public static final String FIELD_TASK_ENGINE = "700073501";
        public static final String[] FIELD_IDS = new String[]{
            FIELD_ID, FIELD_DESCRIPTION, 
            FIELD_NAME, FIELD_ANONYMOUS_URL,
            FIELD_DISPLAY_NAME, FIELD_CATALOG, 
            FIELD_TYPE, FIELD_ASSIGNEE_GROUP, 
            FIELD_MODIFIED, FIELD_MODIFIED_BY,
            FIELD_TASK_ENGINE, FIELD_STATUS};

        private SimpleEntry entry = null;
        private HelperContext context;
        private Catalog catalog = null;
        private List<Category> categories = new ArrayList();
        private Map<String, List<TemplateAttribute>> templateAttributesMap = null;

        public static Template findByDisplayName(HelperContext context, String catalogName, String displayName) {
            Template result = null;

            String qualification =
                "'"+FIELD_CATALOG+"' = \""+catalogName+"\" AND "+
                "'"+FIELD_DISPLAY_NAME+"' = \""+displayName+"\"";

            SimpleEntry entry = ArsBase.findSingle(context, FORM_NAME, qualification, FIELD_IDS);
            if (entry != null) {
                result = new Template(entry, context);
            }

            return result;
        }


        // TODO -- Why is this assuming New and Active?
        // Sysadmin - should get allTemplates in a Catalog - then it can deal with all of them
        // Catalogs - probably only care about Active Templates
        public static Template[] findByCatalogName(HelperContext context, String catalogName) {
            Template[] results = new Template[0];
            // Only return new or active templates
            String qualification = "'"+FIELD_CATALOG+"' = \""+catalogName+"\" AND "+
                "('"+FIELD_STATUS+"' = \"New\" OR '"+FIELD_STATUS+"' = \"Active\")";

            SimpleEntry[] entries = ArsBase.find(context, FORM_NAME, qualification, FIELD_IDS);
            if (entries != null && entries.length > 0) {
                results = new Template[entries.length];
                for(int i=0;i<results.length;i++) {
                    results[i] = new Template(entries[i], context);
                }
            }
            
            return results;
        }

        /**
         * Returns a template matching the given id.  If no template matches the
         * id null will be returned.  Note that an error will be raised if
         * multiple records match the qualification somehow.
         */
        public static Template findById(HelperContext context, String id) {
            // Initialize the result to null.  Null is returned if no matching
            // record is found.
            Template result = null;
            // Build the qualification string.
            String qualification = "'" + FIELD_ID + "' = \"" + id + "\"";
            // Query for the matching record.
            SimpleEntry entry = ArsBase.findSingle(context, FORM_NAME, qualification, FIELD_IDS);
            if (entry != null) {
                result = new Template(entry, context);
            }
            // Return the result.
            return result;
        }

        public Template(SimpleEntry entry, HelperContext context) {
            this.entry = entry;
            this.context = context;
        }
        
        /**
         * Returns the parent catalog of the template.  Note that if the catalog
         * is not already related it retrieves it from the database and stores
         * the result so if it is called multiple times the retrieval is only
         * done once.
         */
        public Catalog getCatalog() {
            if (this.catalog == null) {
                this.catalog = Catalog.findByName(context, getCatalogName());
            }
            return this.catalog;
        }

        public void addCategory(Category category) {
            categories.add(category);
        }
        
        public Category[] getCategories() {
            return categories.toArray(new Category[categories.size()]);
        }

        public boolean hasCategories() {
            return categories.size() > 0;
        }

        public String getCategorizationString() {
            Category[] categories = getCategories();
            StringBuilder result = new StringBuilder();
            for(Category category : categories) {
                // If this is not the first category, append a comma
                if (category != categories[0]) {result.append(",");}
                // Append the category name
                result.append(category.getName());
            }
            return result.toString();
        }

        public void addTemplateAttribute(TemplateAttribute templateAttribute) {
            String attributeName = templateAttribute.getName();
            if (templateAttributesMap == null) {
                templateAttributesMap = new LinkedHashMap<String,List<TemplateAttribute>>();
            }
            if (!templateAttributesMap.containsKey(attributeName)) {
                templateAttributesMap.put(attributeName, new ArrayList<TemplateAttribute>());
            }
            templateAttributesMap.get(attributeName).add(templateAttribute);
        }

        public Map<String,List<TemplateAttribute>> getTemplateAttributesMap() {
            if (templateAttributesMap == null) {
                // Retrieve all of the template attributes for this template.
                TemplateAttribute[] attributes = TemplateAttribute.findByTemplate(
                        context, getCatalogName(), getName());
                // Iterate through the attributes, populating the template
                // attribute map.
                for (TemplateAttribute attribute : attributes) {
                    addTemplateAttribute(attribute);
                }
            }
            return templateAttributesMap;
        }

        public String[] getTemplateAttributeNames() {
            return getTemplateAttributesMap().keySet().toArray(new String[0]);
        }

        public String[] getTemplateAttributeValues(String attributeName) {
            String[] results = new String[0];
            List<TemplateAttribute> attributes = getTemplateAttributesMap().get(attributeName);
            if (attributes != null) {
                results = new String[attributes.size()];
                for (int i=0;i<results.length;i++) {
                    results[i] = attributes.get(i).getValue();
                }
            }
            return results;
        }

        public String getTemplateAttributeValue(String attributeName) {
            String result = null;
            String[] attributeValues = getTemplateAttributeValues(attributeName);
            if(attributeValues.length > 1) {
                throw new RuntimeException("Multiple results matched the attribute "+attributeName+" in template: "+getName());
            }
            else if (attributeValues.length == 1) {
                result = attributeValues[0];
            }
            return result;
        }

        public boolean hasTemplateAttributeValue(String attributeName, String attributeValue) {
            String[] attributeValues = getTemplateAttributeValues(attributeName);
            if(attributeValues != null && attributeValues.length > 0) {
                for (String attributeValueEntry : attributeValues){
                    if (attributeValueEntry.equals(attributeValue)) { 
                        return true;
                    }
                }
            }
            return false;
        }

        public boolean hasTemplateAttribute(String attributeName) {
            String[] attributeNames = getTemplateAttributeNames();
            if(attributeNames != null && attributeNames.length > 0) {
                for (String attributeNameEntry : attributeNames){
                    if (attributeNameEntry.equals(attributeName)) { 
                        return true;
                    }
                }
            }
            return false;
        }

        public String getAnonymousUrl() {
            String anonymousUrl = entry.getEntryFieldValue(FIELD_ANONYMOUS_URL);
            // If there is a display name
            if (getDisplayName() != null && !"".equals(getDisplayName())) {
                // Replace the srv={ID} with name={DISPLAY_NAME}
                anonymousUrl = anonymousUrl.replaceFirst("srv=.*$", "name="+getDisplayName());
            }
            return anonymousUrl;
        }

        
        public String getCatalogName() {return entry.getEntryFieldValue(FIELD_CATALOG);}
        public String getDescription() {return entry.getEntryFieldValue(FIELD_DESCRIPTION);}
        public String getDisplayName() {return entry.getEntryFieldValue(FIELD_DISPLAY_NAME);}
        public String getId() {return entry.getEntryFieldValue(FIELD_ID);}
        public String getName() {return entry.getEntryFieldValue(FIELD_NAME);}
        public String getTaskEngine() {return entry.getEntryFieldValue(FIELD_TASK_ENGINE);}
        public String getStatus() {return entry.getEntryFieldValue(FIELD_STATUS);}
        public String getType() {return entry.getEntryFieldValue(FIELD_TYPE);}
        public String getAssigneeGroup() {return entry.getEntryFieldValue(FIELD_ASSIGNEE_GROUP);}
        public String getModified() {return entry.getEntryFieldValue(FIELD_MODIFIED);}
        public String getModifiedBy() {return entry.getEntryFieldValue(FIELD_MODIFIED_BY);}




        public String toJson() {
            StringBuilder builder = new StringBuilder();
            builder.append("{");
            builder.append("anonymousUrl: '").append(getAnonymousUrl()).append("'").append(",");
            builder.append("catalog: '").append(getCatalogName()).append("'").append(",");
            builder.append("description: '").append(getDescription()).append("'").append(",");
            builder.append("id: '").append(getId()).append("'").append(",");
            builder.append("name: '").append(getName()).append("'");
            builder.append("}");
            return builder.toString();
        }
    }
%>