<%@page import="com.kd.kineticSurvey.beans.CustomerSurvey"%>
<%@page import="com.kd.kineticSurvey.beans.CustomerSurveyReview"%>
<%@page import="java.util.Vector"%>
<%!
    /**
     * Wrappers are preinitialized Java objects that provide easy access to 
     * various settings within the bundle.  The CustomerRequest wrapper is
     * provides convenience methods when working with customer request
     * submissions.
     *
     */
    public static class CustomerRequest {
        
        /**
         * @var CustomerSurvey
         */
        private CustomerSurvey customerSurvey;
        
        /**
         * @var CustomerSurveyReview
         */
        private CustomerSurveyReview customerSurveyReview;
        
        /**
         * @var Vector<CustomerSurveyReview>
         */
        private Vector<CustomerSurveyReview> customerSurveyReviewPages;
        
        /**
         * Initializes the wrapper
         */
        public CustomerRequest(CustomerSurvey customerSurvey, CustomerSurveyReview customerSurveyReview, Vector<CustomerSurveyReview>customerSurveyReviewPages) {
            this.customerSurvey = customerSurvey;
            this.customerSurveyReviewPages = customerSurveyReviewPages;
            this.customerSurveyReview = customerSurveyReview;
        }
        
        /**
         * Initializes the wrapper
         * 
         * @param HttpServletRequest
         * @return CustomerRequestReview
         */
        public CustomerRequest(HttpServletRequest request, CustomerSurvey customerSurvey) {
            // Typcast the RequestPages bean to a CustomerSurveyReview list.
            Vector<CustomerSurveyReview> customerSurveyReviewPages = (Vector)request.getAttribute("RequestPages");
            // Ensure the reviewPages object is never null
            if (customerSurveyReviewPages == null) {customerSurveyReviewPages = new java.util.Vector();}
            // Declare a CustomerSurveyReview object
            CustomerSurveyReview customerSurveyReview = null;
            // If there are reviewable pages
            if (customerSurveyReviewPages != null && customerSurveyReviewPages.size() != 0) {
                // Use the first customerSurveyReview to represent the overall review
                customerSurveyReview = customerSurveyReviewPages.get(0);
                // Overwrite the default customer survey values (which are blank) with
                // appropriate values from the CustomerSurveyReview object.
                if (customerSurvey == null) {
                    customerSurvey = new CustomerSurvey();
                    request.setAttribute("customerSurvey", customerSurvey);
                }
                customerSurvey.setCustomerSurveyRequestID(customerSurveyReview.getCustomerSurveyRequestID());
                customerSurvey.setCategory(customerSurveyReview.getCategory());
                customerSurvey.setCompanyName(customerSurveyReview.getCompanyName());
                customerSurvey.setCompanyID(customerSurveyReview.getCompanyID());
                customerSurvey.setFirstName(customerSurveyReview.getFirstName());
                customerSurvey.setLastName(customerSurveyReview.getLastName());
                customerSurvey.setClientLocale(customerSurveyReview.getClientLocale());
                customerSurvey.setSurveyTemplateInstanceID(customerSurveyReview.getSurveyTemplateInstanceID());
                customerSurvey.setCustomerSurveyInstanceID(customerSurveyReview.getCustomerSurveyInstanceID());
                customerSurvey.setSurveyTemplateName(customerSurveyReview.getSurveyTemplateName());
                customerSurvey.setSuccessMessage(customerSurveyReview.getSuccessMessage());
                customerSurvey.setErrorMessage(customerSurveyReview.getErrorMessage());
                customerSurvey.setCustomerSessionInstanceID(customerSurveyReview.getCustomerSessionInstanceID());
                customerSurvey.setCustomerSurveyInstanceID(customerSurveyReview.getCustomerSurveyInstanceID());
                customerSurvey.setSurveyTemplateInstanceID(customerSurveyReview.getSurveyTemplateInstanceID());
                customerSurvey.setCustomHeaderContent(customerSurveyReview.getCustomHeaderContent());
                customerSurvey.setStylesheetFileName(customerSurveyReview.getStylesheetFileName());
                customerSurvey.setJavascriptFileName(customerSurveyReview.getJavascriptFileName());
                customerSurvey.setSubmitType("ReviewRequest");
            }
            this.customerSurvey = customerSurvey;
            this.customerSurveyReviewPages = customerSurveyReviewPages;
            this.customerSurveyReview = customerSurveyReview;
        }

        public String clearErrorMessage() {
            String result = customerSurvey.getErrorMessage() + customerSurvey.getCustomerSession().getUserContext().getErrorMessage();
            customerSurvey.setErrorMessage("");
            customerSurvey.getCustomerSession().getUserContext().setErrorMessage("");
            return result;
        }

        public String clearSuccessMessage() {
            String result = customerSurvey.getSuccessMessage() + customerSurvey.getCustomerSession().getUserContext().getSuccessMessage();
            customerSurvey.setSuccessMessage("");
            customerSurvey.getCustomerSession().getUserContext().setSuccessMessage("");
            return result;
        }

        /**
         * Returns the name of the catalog the request form belongs to.
         *
         * @return String the name of the catalog
         */
        public String getCatalogName() {
            return customerSurvey.getCategory();
        }

        /**
         * Returns the id of the catalog the request form belongs to.
         *
         * @return String the id of the catalog
         */
        public String getCatalogId() {
            return customerSurvey.getCategoryId();
        }

        /**
         * Returns the value stored in the "Company Name" field on the base 
         * submission form.  This field is typically mapped from an answer that
         * collects the submitter's company name.
         *
         * @return String the value stored in the "Company Name" field
         */
        public String getCompanyName() {
            return customerSurvey.getCompanyName();
        }

        /**
         * Returns the value stored in the "Company Id" field on the base 
         * submission form.  This field is typically mapped from an answer that
         * collects the submitter's company id.
         *
         * @return String the value stored in the "Company Id" field
         */
        public String getCompanyId() {
            return customerSurvey.getCompanyID();
        }

        /**
         * Returns the value that uniquely identifies this submission.  This 
         * value is also referred to as the instance id, the customer survey 
         * base instance id, or the csrv number.  This value is automatically 
         * generated by the server.
         *
         * @return unique identifier for the submission record
         */
        public String getCsrv() {
            return customerSurvey.getCustomerSurveyInstanceID();
        }

        public String getErrorMessage() {
            return customerSurvey.getErrorMessage() + customerSurvey.getCustomerSession().getUserContext().getErrorMessage();
        }

        /**
         * Returns the value stored in the "First Name" field on the base 
         * submission form.  This field is typically mapped from an answer that
         * collects the submitter's first name.
         *
         * @return String the value stored in the "First Name" field
         */
        public String getFirstName() {
            return customerSurvey.getFirstName();
        }

        /**
         * Returns the value stored in the "Last Name" field on the base 
         * submission form.  This field is typically mapped from an answer that
         * collects the submitter's last name.
         *
         * @return String the value stored in the "First Name" field
         */
        public String getLastName() {
            return customerSurvey.getLastName();
        }

        public java.util.Locale getLocale() {
            return customerSurvey.getClientLocale();
        }

        public String getPageName() {
            return customerSurvey.getPageName();
        }

        public String getPageId() {
            return customerSurvey.getPageInstanceID();
        }

        public String getSuccessMessage() {
            return customerSurvey.getSuccessMessage() + customerSurvey.getCustomerSession().getUserContext().getSuccessMessage();
        }

        public String getKsr() {
            return customerSurvey.getCustomerSurveyRequestID();
        }

        /**
         * Returns the value that uniquely identifies the template, or form this
         * submission is a child of.  This value is automatically set by the 
         * server.
         *
         * @return the id of the template, or form this submission belongs to
         */
        public String getTemplateId() {
            return customerSurvey.getSurveyTemplateInstanceID();
        }

        /**
         * Returns the name of the template, or form this submission is a child 
         * of.  This value is automatically set by the server.
         *
         * @return the name of the template, or form this submission belongs to
         */
        public String getTemplateName() {
            return customerSurvey.getSurveyTemplateName();
        }
        
        /**
         * Returns the page question content of the survey
         *
         * @return String
         */
        public String getQuestions() {
            return customerSurvey.getQuestions();
        }
        
        /**
         * @return boolean
         */
        public boolean isReviewRequest() {
            // Assume failure
            boolean result = false;
            // Determine if there are review pages
            if (this.customerSurveyReviewPages != null && this.customerSurveyReviewPages.size() != 0) {
                result = true;
            }
            return result;
        }

        /**
         * @return boolean
         */
        public boolean getLoadAllPages() {
            return (this.customerSurveyReview == null) ? false : this.customerSurveyReview.getLoadAllPages();
        }
        
        /**
         * @return Vector<CustomerSurveyReview>
         */
        public Vector<CustomerSurveyReview> getReviewPages() {
            return this.customerSurveyReviewPages;
        }
    }
%>