<%@page import="java.io.File"%>
<%@page import="com.kd.arsHelpers.SimpleEntry"%>
<%@page import="com.kd.kineticSurvey.beans.CustomerSurvey"%>
<%@page import="com.kd.ksr.beans.Page"%>
<%@page import="com.kd.ksr.beans.Question"%>
<%@page import="com.kd.ksr.cache.PageCache"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.Enumeration"%>
<%@page import="java.util.Iterator"%>
<%@page import="java.util.List"%>
<%@page import="java.util.Locale"%>
<%@page import="java.util.MissingResourceException"%>
<%@page import="java.util.ResourceBundle"%>
<%@page import="java.util.regex.Matcher"%>
<%@page import="java.util.regex.Pattern"%>
<%@page import="java.net.MalformedURLException"%>
<%@page import="java.net.URI"%>
<%@page import="java.net.URL"%>
<%@page import="java.net.URLClassLoader"%>
<%!
    public static class ThemeLocalizer {
        /**
         * Locates the property files based on an absolute file path and 
         * instantiates the Resource Bundle object using locale and the property file.
         *
         * @param String bundleName, the name of the properties file without the locale
         * @param String locale, the locale settings (zh_CN_Hans, zh_CN_Hant, de, en)
         * Note on locale: it goes in the following order: language, country, variant 
         * (variant is arbitrary but it is usually the variation of the language)
         * @param String absoluteTranslationPath, the the path to the properties
         * @return ResourceBundle
         */
        public static ResourceBundle getResourceBundle(String bundleName, String locale, String absolutePropertyFilesPath) {
            // Establish var
            ResourceBundle resourceBundle = null;
            // Check if the locale contains any characters
            if (locale.length() > 0) {
                // Set file with translation path
                File file = new File(absolutePropertyFilesPath);
                try {
                    // Add the translation path to the class loader
                    URL[] urls = {file.toURI().toURL()};
                    ClassLoader classLoader = new URLClassLoader(urls);
                    // Take the locale and split it to build up the langauge, country and variant
                    String vals[] = locale.split("_");
                    // Set the langauge
                    String language = vals[0];
                    // Set the country if it exists
                    String country = "";
                    if(vals.length > 1) {
                        country = vals[1];
                    }
                    // Set the variant if it exists (the variation of the language, for example, Hans vs Hant)
                    String variant = "";
                    if(vals.length > 2) {
                        variant = vals[2];
                    }
                    // Instantiate locale object
                    Locale resourceBundleLocale = new Locale(language, country, variant);
                    resourceBundle = ResourceBundle.getBundle(bundleName, resourceBundleLocale, classLoader,
                        new ResourceBundle.Control() {
                            public long getTimeToLive(String baseName, Locale locale) {
                                return 0;
                            }
                        }
                    );
                } catch (MalformedURLException e) {
                    throw new RuntimeException("Caught MalformedURLException: " + e.getMessage());
                } catch (MissingResourceException e) {
                    // Ignore errors if a translation file cannot be retrieved.  One may not always be available
                }
            }
            // Return a Resource Bundle with the default locale
            else {
                   resourceBundle = ResourceBundle.getBundle(bundleName,
                     new ResourceBundle.Control() {
                        public long getTimeToLive(String baseName, Locale locale) {
                            return 0;
                        }
                   });
            }  
            return resourceBundle;
        }
        
        /**
         * Returns the translation property by key name from the given Resource Bundle
         *
         * @param ResourceBundle
         * @param String, a key that maps to the translation value inside the properties file.
         */
        public static String getString(ResourceBundle resourceBundle, String key) {
            // Assume failure and set result to key
            String result = key;
            try {
                // Format key so all spaces are replaced with an underscore
                String formatKey = key.replaceAll(" ", "_");
                // Attempt to set translation
                result = resourceBundle.getString(formatKey);
            } catch(Exception e) {
                // Do Nothing
            }
            return result;
        }

        /**
         * i18nValues holds the translations that will be used by JavaScript code. After it is populated with all the values 
         * from all the resourceBundles in the packages, it is used to populate the Localize javascript function later on in the load process.
         *
         * Example use in defining the i18nValues in Java:
         * <pre>
         * {@code
         * // Building the i18nValues in Java
         * String i18nValues = "";
         * i18nValues = ThemeLocalizer.getJavaScriptValues(commonResourceBundle, i18nValues);
         * }
         * </pre>
         *
         * Example use for setting the i18nValues into JavaScript
         * <pre>
         * {@code
         *  // Create .localize() method for the String function.  This allows any JavaScript string to be
         *  // localized by adding ".localize()" to the end.  Examples: "hello".localize() or stringVariable.localize()
         *  var Localization = { %=i18nValues% };
         *  String.prototype.localize = function() {
         *      var key=this.replace(/ /g,"_");
         *      var s = Localization[key];
         *      return ( s ) ? s : this;
         *  }
         * }
         * </pre>
         *
         * @param ResourceBundle
         * @param String, the i18nValues that can be made available in JavaScript
         */
        public static String getJavaScriptValues(ResourceBundle resourceBundle, String i18nValues) {
            if(resourceBundle != null) {
                // Determine if null
                if(i18nValues == null) {
                    // Update to empty string
                    i18nValues = "";
                }
                for(Enumeration en = resourceBundle.getKeys(); en.hasMoreElements(); ){
                    String key = (String) en.nextElement();
                    if (key.indexOf("javascript.") >= 0){
                        String keyVal = key.replaceAll("javascript.", "");
                        if (i18nValues != ""){
                            i18nValues += ",";
                        }
                        i18nValues += "\"" + keyVal + "\" : \"" + resourceBundle.getString(key) + "\"";
                    }
                }
            }
            return i18nValues;
        }
        
        /**
         * Sets up the proper language for the entire template's dynamic page content
         * Includes buttons, question labels, template description with the <LOCALIZE_SERVICE_ITEM_DESCRIPTION> tag,
         * any defined <LOCALIZE_SI></LOCALIZE_SI> tags and any defined <LOCALIZE_TEMPLATE></LOCALIZE_TEMPLATE> tags.
         *
         * @param CustomerSurvey
         * @param ResourceBundle, the service item name and description resource bundle
         * @param ResourceBundle, the template shared resource bundle
         * @param ResourceBundle, the template specific resource bundle
         */
        public static String localizeTemplatePageContent(
            CustomerSurvey customerSurvey,
            ResourceBundle serviceItemsResourceBundle,
            ResourceBundle templateSharedResourceBundle,
            ResourceBundle templateResourceBundle) {
            // Define and get the page content
            String pageContent = customerSurvey.getQuestions();
            // If page content null, set to empty string
            if(pageContent == null) {
                pageContent = "";
            }
            // Convert template buttons to proper locale
            pageContent = ThemeLocalizer.localizeTemplateButtons(pageContent, templateSharedResourceBundle);
             // Define page
            Page page = null;
            try {
                // Attempt to get the page
                page = PageCache.getPageByInstanceId(customerSurvey.getSurveyTemplateInstanceID(), customerSurvey.getPageInstanceID()); 
            } catch(Exception e) {
                throw new RuntimeException("Unable to load page cache: " + e.getMessage());
            }
            // Determine if not null
            if(page != null) {
                // Define and get the questions
                SimpleEntry[] questions = page.getPageQuestions();
                // Convert template question labels to proper locale
                pageContent = ThemeLocalizer.localizeTemplateQuestionLabels(pageContent, questions, templateSharedResourceBundle, templateResourceBundle);
            }
            // Convert dynamic template content to proper locale with the localize template tags
            pageContent = ThemeLocalizer.localizeTemplate(pageContent,templateSharedResourceBundle, templateResourceBundle);
            // Define template name
            String templateName = customerSurvey.getSurveyTemplateName();
            // Convert template description to proper locale
            pageContent = ThemeLocalizer.localizeTemplateDescription(pageContent, templateName, serviceItemsResourceBundle);
            // Convert remaining localize si tags to proper locale
            pageContent = ThemeLocalizer.localizeTemplateNameAndDescription(pageContent, serviceItemsResourceBundle);
            return pageContent;
        }
        
        /**
         * Sets up the proper language for the template description field when using <LOCALIZE_SERVICE_ITEM_DESCRIPTION> tag.
         * A match is found in the properties file based on the "template_name_DESCRIPTION".
         * The translations come from the service items resource bundle, which holds template name and description translations.
         *
         * @param String, dynamic page content
         * @param String, name of template
         * @param ResourceBundle, the template common resource bundle
         */
        public static String localizeTemplateDescription(String pageContent, String templateName, ResourceBundle serviceItemsResourceBundle) {
            // Determine if tag exists
            if (pageContent.indexOf("<LOCALIZE_SERVICE_ITEM_DESCRIPTION>") >= 0) {
                // Define translated value
                String localizedDescription = ThemeLocalizer.getString(serviceItemsResourceBundle, templateName + "_DESCRIPTION");
                // Update matched localize tag with translated value
                pageContent = pageContent.replace("<LOCALIZE_SERVICE_ITEM_DESCRIPTION>", localizedDescription);
            }
            return pageContent;
        }
        
        /**
         * Sets up the proper language for template buttons, for example, "Back, Continue, Submit, Upload and etc".
         *
         * @param String, dynamic page content
         * @param ResourceBundle, the template shared resource bundle
         */
        public static String localizeTemplateButtons(String pageContent, ResourceBundle templateSharedResourceBundle) {
            // Localize the templateButton like Submit and Previous
            {
                // Define regex pattern
                Pattern pattern = Pattern.compile("(<input id='SUBMIT_.*>|<input id='PREV_.*>|<input id='BTNLOCALIZE_.*>|<input id=\"BTNLOCALIZE_.*>)");
                // Define matcher with regex
                Matcher matcher = pattern.matcher(pageContent);
                // Build up the results string
                StringBuilder builder = new StringBuilder();
                int lastMatch = 0;
                while(matcher.find()) {
                    // Retrieve the necessary values
                    String preMatch = pageContent.substring(lastMatch, matcher.start());
                    String buttonDiv = matcher.group(1);
                    buttonDiv = buttonDiv.replaceAll("= '", "='");
                    if (buttonDiv.indexOf("value='") == -1) continue;
                    int startIndex=buttonDiv.indexOf("value='") + "value='".length();
                    String buttonValue = buttonDiv.substring(startIndex, buttonDiv.indexOf("'", startIndex)); 
                    buttonDiv = buttonDiv.replaceAll(
                        "value='" + buttonValue + "'", 
                        "value='" + ThemeLocalizer.getString(templateSharedResourceBundle, buttonValue) + "'"
                    );
                    // Append any part of the qualification that exists before the match
                    builder.append(preMatch);
                    builder.append(buttonDiv);
                    // Set the lastMatch index for use in the next loop
                    lastMatch = matcher.end();
                }
                // Append any part of the qualification remaining after the last match
                builder.append(pageContent.substring(lastMatch));
                pageContent = builder.toString();
            }

            // Localize the Attachment Load button
            {
                // Define regex pattern
                Pattern pattern = Pattern.compile("(<input type='button' id='ATTACHLOAD_.*>)");
                // Define matcher with regex
                Matcher matcher = pattern.matcher(pageContent);
                // Build up the results string
                StringBuilder builder = new StringBuilder();
                int lastMatch = 0;
                while(matcher.find()) {
                    // Retrieve the necessary values
                    String preMatch = pageContent.substring(lastMatch, matcher.start());
                    String buttonDiv = matcher.group(1);
                    buttonDiv=buttonDiv.replaceAll("= '", "='");
                    if (buttonDiv.indexOf("value='") == -1) continue;
                    int startIndex=buttonDiv.indexOf("value='") + "value='".length();
                    String buttonValue = buttonDiv.substring(startIndex, buttonDiv.indexOf("'", startIndex)); 
                    buttonDiv=buttonDiv.replaceAll(
                        "value='" + buttonValue + "'", 
                        "value='"+ThemeLocalizer.getString(templateSharedResourceBundle,buttonValue) + "'"
                    );
                    // Append any part of the qualification that exists before the match
                    builder.append(preMatch);
                    builder.append(buttonDiv);
                    // Set the lastMatch index for use in the next loop
                    lastMatch = matcher.end();
                }
                // Append any part of the qualification remaining after the last match
                builder.append(pageContent.substring(lastMatch));
                pageContent = builder.toString();
            }

            // Localize the Attachment Clear button
            {                
                // Define regex pattern
                Pattern pattern = Pattern.compile("(<input type='button' id='ATTACHCLEAR_.*>)");
                // Define matcher with regex
                Matcher matcher = pattern.matcher(pageContent);
                // Build up the results string
                StringBuilder builder = new StringBuilder();
                int lastMatch = 0;
                while(matcher.find()) {
                    // Retrieve the necessary values
                    String preMatch = pageContent.substring(lastMatch, matcher.start());
                    String buttonDiv = matcher.group(1);
                    buttonDiv=buttonDiv.replaceAll("= '", "='");
                    if (buttonDiv.indexOf("value='") == -1) continue;
                    int startIndex=buttonDiv.indexOf("value='") + "value='".length();
                    String buttonValue = buttonDiv.substring(startIndex, buttonDiv.indexOf("'", startIndex)); 
                    buttonDiv = buttonDiv.replaceAll(
                        "value='" + buttonValue + "'", 
                        "value='" + ThemeLocalizer.getString(templateSharedResourceBundle,buttonValue) + "'"
                    );
                    // Append any part of the qualification that exists before the match
                    builder.append(preMatch);
                    builder.append(buttonDiv);
                    // Set the lastMatch index for use in the next loop
                    lastMatch = matcher.end();
                }
                // Append any part of the qualification remaining after the last match
                builder.append(pageContent.substring(lastMatch));
                pageContent = builder.toString();
            }
            return pageContent;
        }
        
        /**
         * Sets up the proper language for template question labels.
         * No tags are needed; translate based on the template and standards resource bundles 
         * using the question label with underscores inside the property file.
         * Translate based on the template resource bundle first and fallback to the template shared resource bundles.
         * 
         * @param String, dynamic page content
         * @param SimpleEntry[], template questions
         * @param ResourceBundle, the template shared resource bundle
         * @param ResourceBundle, the template specific resource bundle
         */
        public static String localizeTemplateQuestionLabels(
            String pageContent,
            SimpleEntry[] questions,
            ResourceBundle templateSharedResourceBundle,
            ResourceBundle templateResourceBundle) {
            // Localize all question labels.
            for (SimpleEntry questionEntry : questions) {
                Question question = new Question(questionEntry);
                // Define regex
                Pattern pattern = Pattern.compile("(id='QLABEL_" + question.getId() + ".*>)(.*) ");
                // Define matcher with regex
                Matcher matcher = pattern.matcher(pageContent);
                // Build up the results string
                StringBuilder builder = new StringBuilder();
                int lastMatch = 0;
                // Find and loop through matches
                while(matcher.find()) {
                    // Retrieve the necessary values
                    String preMatch = pageContent.substring(lastMatch, matcher.start());
                    String preLabel = matcher.group(1);
                    String label = matcher.group(2);
                    // Append any part of the qualification that exists before the match
                    builder.append(preMatch);
                    // This attempts to localize based on the template specific resource bundle first.
                    // Note: two scenarios can play out.
                    // Scenario 1: If match found, the value will not match with the template shared resource bundle
                    // and the template specific translation will display.
                    // Scenario 2: If match not found, the original key value is returned (getString)
                    // and a match is attempted at the template shared resource bundle level.
                    String translatedValue = preLabel + ThemeLocalizer.getString(templateSharedResourceBundle, ThemeLocalizer.getString(templateResourceBundle, label));
                    builder.append(translatedValue);
                    // Set the lastMatch index for use in the next loop
                    lastMatch = matcher.end();
                }
                // Append any part of the qualification remaining after the last match
                builder.append(pageContent.substring(lastMatch));
                pageContent = builder.toString();
            }
            return pageContent;
        }
        
        /**
         * Sets up the proper language for template dynamic content using the <LOCALIZE_SI>property_key</LOCALIZE_SI> tags.
         * The translations come from the service items resource bundle, which holds template name and description translations.
         * This is often used for translating service item name or description information inside dynamic content,
         * which avoids having to duplicate service item name and description translations in a different resource bundle
         * because the service item resource bundle is used in various portal pages as well.
         *
         * @param String, dynamic page content
         * @param ResourceBundle, the service item name and description resource bundle
         */
        public static String localizeTemplateNameAndDescription(String pageContent, ResourceBundle serviceItemsResourceBundle) {
            // Define list that will hold the matched template values from the regex below
            List<String> matchedTemplateValues = new ArrayList<String>();
            // Define regex
            Pattern localizePattern = Pattern.compile("<LOCALIZE_SI>(.*?)</LOCALIZE_SI>");
            // Define matcher with pattern
            Matcher localizeMatcher = localizePattern.matcher(pageContent);
             // Find and loop through matches
            while(localizeMatcher.find()) {
                // Define match
                String matchString = localizeMatcher.group();
                // Build up matched values
                matchedTemplateValues.add(matchString);
            }
            // Define iterator of matched values
            Iterator<String> iterator = matchedTemplateValues.iterator();
            // Loop through matched values
            while (iterator.hasNext()) {
                // Define match value and forward
                String matchString = (String) iterator.next();
                // Get original value without the localize tags in it
                String originalValue = matchString.replaceFirst("<LOCALIZE_SI>", "").replaceFirst("</LOCALIZE_SI>", "");
                // Define translated value
                String translatedValue = ThemeLocalizer.getString(serviceItemsResourceBundle, originalValue);
                // Update matched localize tag with translated value
                pageContent = pageContent.replaceAll(matchString, translatedValue);
            }
            return pageContent;
        }
        
        /**
         * Find all <LOCALIZE_TEMPLATE>property_key</LOCALIZE_TEMPLATE> tags inside the page content.
         * For example, these tags could be stored inside the page content's text elements and list buttons.
         * These Tags will translate based on the template resource bundle first and fallback to the template shared resource bundles.
         *
         * @param String, dynamic page content
         * @param SimpleEntry[], template questions
         * @param ResourceBundle, the template shared resource bundle
         * @param ResourceBundle, the template specific resource bundle
         */
        public static String localizeTemplate(
            String pageContent,
            ResourceBundle templateSharedResourceBundle,
            ResourceBundle templateResourceBundle) {
            // Define list of matched template values.
            // These matches include any page content with the open and closed localize tags
            List<String> matchedTemplateValues = new ArrayList<String>();
            // Define regex
            Pattern localizeTemplatePattern = Pattern.compile("<LOCALIZE_TEMPLATE>(.*?)</LOCALIZE_TEMPLATE>");
            // Define matcher with pattern
            Matcher localizeTemplateMatcher = localizeTemplatePattern.matcher(pageContent);
            // Find and loop through matches
            while(localizeTemplateMatcher.find()) {
                // Define match
                String matchString = localizeTemplateMatcher.group();
                // Build up matched values
                matchedTemplateValues.add(matchString);
            }
            // Define iterator of matched values
            Iterator<String> iterator = matchedTemplateValues.iterator();
            // Loop through matched values
            while (iterator.hasNext()) {
                // Define match value and forward
                String matchString = (String) iterator.next();
                // Get original value without the localize tags in it
                String originalValue = matchString.replaceFirst("<LOCALIZE_TEMPLATE>", "").replaceFirst("</LOCALIZE_TEMPLATE>", "");
                // This attempts to localize based on the template specific resource bundle first.
                // Note: two scenarios can play out.
                // Scenario 1: If match found, the value will not match with the template shared resource bundle
                // and the template specific translation will display.
                // Scenario 2: If match not found, the original key value is returned (getString) 
                // and a match is attempted at the template shared resource bundle level.
                String translatedValue = ThemeLocalizer.getString(templateSharedResourceBundle, ThemeLocalizer.getString(templateResourceBundle, originalValue));
                // Update matched localize tag with translated value
                pageContent = pageContent.replaceAll(matchString, translatedValue);
            }
            return pageContent;
        }
    }
%>